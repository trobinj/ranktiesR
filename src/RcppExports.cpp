// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "ranktiesR_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ranktiesmodel
Rcpp::List ranktiesmodel(umat y, dmat x, uvec n, uvec m, int t, double delta, double scale, std::string type, int h, bool print);
RcppExport SEXP _ranktiesR_ranktiesmodel(SEXP ySEXP, SEXP xSEXP, SEXP nSEXP, SEXP mSEXP, SEXP tSEXP, SEXP deltaSEXP, SEXP scaleSEXP, SEXP typeSEXP, SEXP hSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type y(ySEXP);
    Rcpp::traits::input_parameter< dmat >::type x(xSEXP);
    Rcpp::traits::input_parameter< uvec >::type n(nSEXP);
    Rcpp::traits::input_parameter< uvec >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(ranktiesmodel(y, x, n, m, t, delta, scale, type, h, print));
    return rcpp_result_gen;
END_RCPP
}
// ranktiesloglik
double ranktiesloglik(umat y, dvec x, dvec w, dvec theta, std::string type, double delta, int b, int m);
RcppExport SEXP _ranktiesR_ranktiesloglik(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP deltaSEXP, SEXP bSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type y(ySEXP);
    Rcpp::traits::input_parameter< dvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< dvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< dvec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ranktiesloglik(y, x, w, theta, type, delta, b, m));
    return rcpp_result_gen;
END_RCPP
}
// residuals
Rcpp::List residuals(umat y, dvec x, dvec theta, std::string type, double delta, int n);
RcppExport SEXP _ranktiesR_residuals(SEXP ySEXP, SEXP xSEXP, SEXP thetaSEXP, SEXP typeSEXP, SEXP deltaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type y(ySEXP);
    Rcpp::traits::input_parameter< dvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< dvec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(residuals(y, x, theta, type, delta, n));
    return rcpp_result_gen;
END_RCPP
}
// rankmodel
Rcpp::List rankmodel(umat y, dmat x, uvec n, uvec m, int t, bool print, int h);
RcppExport SEXP _ranktiesR_rankmodel(SEXP ySEXP, SEXP xSEXP, SEXP nSEXP, SEXP mSEXP, SEXP tSEXP, SEXP printSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type y(ySEXP);
    Rcpp::traits::input_parameter< dmat >::type x(xSEXP);
    Rcpp::traits::input_parameter< uvec >::type n(nSEXP);
    Rcpp::traits::input_parameter< uvec >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(rankmodel(y, x, n, m, t, print, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ranktiesR_ranktiesmodel", (DL_FUNC) &_ranktiesR_ranktiesmodel, 10},
    {"_ranktiesR_ranktiesloglik", (DL_FUNC) &_ranktiesR_ranktiesloglik, 8},
    {"_ranktiesR_residuals", (DL_FUNC) &_ranktiesR_residuals, 6},
    {"_ranktiesR_rankmodel", (DL_FUNC) &_ranktiesR_rankmodel, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ranktiesR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
